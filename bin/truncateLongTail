#!/bin/bash
shopt -qs extglob

: ${TRUNCATELONGTAIL_INCLUDE_SEPARATOR:=[...]}
: ${TRUNCATELONGTAIL_INPUTFILES_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[--has-header] [-F|--field-separator FS] [-m|--include PATTERN [-m ...]] [-]N|HEADER-NAME'
    printf 'Usage: %q %s\n' "$(basename "$1")" "... -i|--input FILE [-i ...]|--input-files FILE [...] ${TRUNCATELONGTAIL_INPUTFILES_END} [-]N|HEADER-NAME [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Observe the decreasing numbers in field N (-N counted from behind) / field with
HEADER-NAME (implies --has-header) and suppress any output once a calculated
threshold value is reached.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --include|-m PATTERN
			Don't suppress lines that match PATTERN in the long
			tail. ${TRUNCATELONGTAIL_INCLUDE_SEPARATOR:+A }${TRUNCATELONGTAIL_INCLUDE_SEPARATOR:-Nothing} is placed before it.
			PATTERN is an AWK-style unanchored extended regular
			expression.
    --input|-i FILE 	Read from FILE(s) instead of standard input.
    --input-files FILE [...] ${TRUNCATELONGTAIL_INPUTFILES_END}
			Read from the following FILE(s) i.e. all following
			arguments until an argument consisting of '${TRUNCATELONGTAIL_INPUTFILES_END}' is
			encountered instead of standard input.
HELPTEXT
}

includePattern=
typeset -a fsArgs
typeset -a inputFilespecs=()
hasHeader=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--has-header)	shift; hasHeader=t;;
	--input|-i)	shift; inputFilespecs+=("${1:?}"); shift;;
	--input-files)	shift
			while [ $# -gt 0 -a "$1" != "$TRUNCATELONGTAIL_INPUTFILES_END" ]
			do
			    inputFilespecs+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --input-files must be concluded with '${TRUNCATELONGTAIL_INPUTFILES_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			if [ ${#inputFilespecs[@]} -eq 0 ]; then
			    echo 'ERROR: --input-files must be followed by at least one FILE.'; echo; printUsage "$0"
			    exit 2
			fi >&2
			;;
	--field-separator|-F)
			shift; fsArgs=(-F "$1"); shift;;
	--include|-m)	shift; includePattern+="${includePattern:+|}${1:?}"; shift;;
	--include=*)	includePattern+="${includePattern:+|}${1#--include=}"; shift;;
	--)		shift; break;;
	-+([0-9]))	break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage >&2 "$0"
    exit 2
fi


awk \
    "${fsArgs[@]}" \
    -v "hasHeader=$hasHeader" \
    -v "valueFieldSpecifier=${1:?}" \
    -v "includePattern=${includePattern//\/\\}" \
    -v "includeSeparator=${TRUNCATELONGTAIL_INCLUDE_SEPARATOR//\\/\\\\}" \
'
function getFieldNr()
{
    return (valueFieldNr ~ /^-/ ? NF + valueFieldNr + 1 : valueFieldNr)
}
function calculateCutOffValue()
{
    fieldNr = getFieldNr()
    cutOffValue = 2 * log($fieldNr) # Empirical formula.
}
NR == 1 {
    if (valueFieldSpecifier ~ /^-?[0-9]+$/) {
	valueFieldNr = valueFieldSpecifier
	fieldNr = getFieldNr()
	if (fieldNr <= 0 || fieldNr > NF) {
	    printf "ERROR: No field number %d in\n%s\n", valueFieldNr, $0 > "/dev/stderr"
	    NR = 0	# Do not print first line.
	    exit 3
	}

	if (! hasHeader) {
	    # No header with N; take maximum value from first line.
	    calculateCutOffValue()
	}
    } else {
	for (valueFieldNr = 1; valueFieldNr <= NF; valueFieldNr++) {
	    if ($valueFieldNr == valueFieldSpecifier) {
		next
	    }
	}

	printf "ERROR: Could not locate field named %s in\n%s\n", valueFieldSpecifier, $0 > "/dev/stderr"
	NR = 0	# Do not print first line.
	exit 3
    }
    print
    next
}
NR == 2 && hasHeader {
    calculateCutOffValue()
    print
    next
}
{
    fieldNr = getFieldNr()
    if ($fieldNr < cutOffValue) {
	isCutOff = 1
	if (includePattern != "" && $0 ~ includePattern) {
	    if (lastIncludedLnum != NR - 1 && includeSeparator != "") {
		print includeSeparator
	    }
	    print
	    lastIncludedLnum = NR
	}
    } else if (isCutOff) {
	printf "Warning: Value %d in line %d exceeds threshold %d again; the values in field %s are not decreasing.\n", $fieldNr, NR, cutOffValue, valueFieldSpecifier > "/dev/stderr"
    } else {
	print
	lastIncludedLnum = NR
    }
}

' "${inputFilespecs[@]}"
