#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [STATISTICS_PRECISION=N] %q %s\n' "$(basename "$1")" '[-l|--legend] [-u|--unit UNIT] FILE [...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-L|--legend-only [-u|--unit UNIT]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Analyzes the per-line numbers from standard input and prints statistical values:
min-max, median and mean values, first and third quartile, standard deviation
(all with STATISTICS_PRECISION digits after the decimal point), [unique] count
and sum.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --raw|-r	    Print just the bare, space-separated numbers.
    --ascii	    Embellish the numbers with ASCII descriptions, not the
		    Unicode characters that are the default.
    --legend|-l	    Append a legend to the output.
    --legend-only|-L
		    Just print a legend (without analyzing input).
    --unit|-u UNIT  Append UNIT behind every value (except the counts), or in
		    the legend if printed.

Example:
HELPTEXT
    printf 'cat datadump | %q %s\n' "$(basename "$1")" '--unit m/s'
}

F="%${STATISTICS_PRECISION:+.}${STATISTICS_PRECISION:-g}${STATISTICS_PRECISION:+f}"
format="⭳:${F}%s ¼:${F}%s õ:${F}%s ø:${F}%s ¾:${F}%s ⭱:${F}%s σ:${F}%s Σ:${F}%s N:%d ≠:%d\\n"
legend='⭳:minimum value%s\n¼:first quartile value%s\nõ:median%s\nø:mean of the values%s\n¾:third quartile value%s\n⭱:maximum value%s\nσ:standard deviation%s\nΣ:sum of all values%s\nN:number of values%s\n≠:number of unique/distinct values%s\n'
isAddLegend=
isLegendOnly=
unit=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--raw|-r)	shift
			format="${F}%s ${F}%s ${F}%s ${F}%s ${F}%s ${F}%s ${F}%s ${F}%s %d %d\\n"
			legend="${legend//?:/}"
			;;
	--ascii)	shift
			format="min:${F}%s q1:${F}%s med:${F}%s avg:${F}%s q3:${F}%s max:${F}%s std:${F}%s sum:${F}%s N:%d U:%d\\n"
			legend='min: minimum value%s\nq1 : first quartile value%s\nmed: median%s\navg: mean of the values%s\nq3 : third quartile value%s\nmax: maximum value%s\nstd: standard deviation%s\nsum: sum of all values%s\nN  : number of values%s\nU  : number of unique/distinct values%s\n'
			;;
	--legend|-l)	shift; isAddLegend=t;;
	--legend-only|-L)
			shift; isLegendOnly=t;;
	--unit|-u)	shift; unit="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
legendUnit=
if [ "$isLegendOnly" ]; then
    [ -z "$unit" ] || legendUnit=" (${unit})"
    printf "$legend" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit"
    exit
fi

analyze()
{
    IFS=$'\t' read -r min q1 median mean q3 max sstdev sum num unique < <(datamash min 1 q1 1 median 1 mean 1 q3 1 max 1 sstdev 1 sum 1 count 1 countunique 1)

    if [ "$isAddLegend" ]; then
	legendUnit=" (${unit})"
	unit=
    fi

    printf "$format" "$min" "$unit" "$q1" "$unit" "$median" "$unit" "$mean" "$unit" "$q3" "$unit" "$max" "$unit" "$sstdev" "$unit" "$sum" "$unit" "$num" "$unique"

    if [ "$isAddLegend" ]; then
	printf "$legend" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit" "$legendUnit"
    fi
}

if [ $# -eq 0 ]; then
    analyze
else
    cat -- "$@" | analyze
fi
