#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf "Usage: echo -e '11:01\\\\n11:30\\\\n12:00\\\\n...'| [DISTRIBUTIONOVERTHEDAY_EMPTY_CELL='-'] [DISTRIBUTIONOVERTHEDAY_BORDERS='/ \ L J'] [DISTRIBUTIONOVERTHEDAY_LEGEND_LENGTH=N] %q %s\\n" "$(basename "$1")" '[--no-footer|--final-footer-only|--footer-only-on-change|--footer-every N] [--graph-legend TEXT] [--graph-field N] [--footer-legend TEXT] [--footer-field N] [-F|--field-separator FS] [--hour-field N] [--minute-field M] [--first-hour HH] [--last-hour HH] [--slots-per-hour N] [--count-field C [--default-count C|""]] [--split-graph-field N [--split-graph-field ...]] [--as colorbox-calendar|green-[large-]calendar] [SPARK-ARGS ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the distribution of the number of times that fall into a certain slot (15
minutes by default) over the day; i.e. from morning to evening. Requires HH:MM
in the first column of the data; anything after that (separated by : or
whitespace, e.g. HH:MM:SS or HH:MM text) is ignored.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --no-footer		Omit the footer that shows the hours.
    --final-footer-only	Omit the footer on all graphs but the very last.
    --footer-only-on-change
			Only print a footer if it changed vs. the previous one.
			The text captured by --footer-field is not considered
			here.
    --footer-every N	Print the footer on every N'th graph. Can be combined
			with --footer-only-on-change.
    --graph-legend TEXT	Add TEXT in front of the distribution. This will also be
			the fallback text if no field value is found.
    --graph-field N	Add text captured from the first non-empty column N of
			the input data in front of the distribution.
    --footer-legend TEXT
			Add TEXT in front of the footer. If --no-footer, this
			will be put after the graph legend instead. This will
			also be the fallback text if no field value is found.
    --footer-field N	Add text captured from the first non-empty column N of
			the input data in front of the footer. If --no-footer,
			this will be put after the graph legend instead.
    --field-separator|-F FS
			Use FS for splitting the data into columns (instead of
			the default whitespace + [:_/-]).
    --hour-field N	Take the hour of the day from column N instead of 1.
    --minute-field N	Take the minute of the day from column M instead of 2.
    --first-hour HH	Start the distribution at HH:00 (omitting any earlier
			values).
    --last-hour HH	End the distribution after HH:59 (omitting any later
			values).
    --count-field C	Increment the number of dates by the value found in
			column C (instead of by 1); i.e. the data already is
			pre-accumulated.
    --default-count C	Use a count of C if the count column does not contain an
			integer or is missing. Suppresses the warning that would
			normally be given then.
    --slots-per-hour N	Divide each hour into N slots (comprising 60 / N
			minutes); default is 4 / 15 minutes.
    --split-graph-field N
			Whenever the non-empty value of column N changes, start
			a new graph. If you want to graph every day separately,
			pass the day (and month and year if data may have large
			gaps in between) columns here. HELPTEXT
    --as NAME-calendar	Special out-of-the-box spark style customizations.
HELPTEXT
}

typeset -a sparkArgs=()
graphLegendText=
graphFieldNr=
footerLegendText=
footerFieldNr=
separator='[[:space:]:_/-]'
hourFieldNr=1
minuteFieldNr=2
firstHour=
lastHour=
countFieldNr=
defaultCount=none
isFooter=t
finalFooter=
typeset -a footerCapture=()
isFooterOnlyOnChange=
footerEvery=
slotNum=4
typeset -a splitFieldNrs=()
typeset -a sparkArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-footer)	shift; isFooter=;;
	--final-footer-only)
			shift; footerCapture=(-v finalFooter);;
	--footer-only-on-change)
			shift; footerCapture=(-v finalFooter); isFooterOnlyOnChange=t;;
	--footer-every)	shift; footerEvery="${1:?}"; shift; footerCapture=(-v finalFooter);;
	--graph-legend)	shift; graphLegendText="$1"; shift;;
	--graph-field)	shift; graphFieldNr="$1"; shift;;
	--footer-legend)
			shift; footerLegendText="$1"; shift;;
	--footer-field)	shift; footerFieldNr="$1"; shift;;
	--field-separator|-F)
			shift; separator="${1:?}"; shift;;
	--hour-field)   shift; hourFieldNr="${1:?}"; shift;;
	--minute-field)	shift; minuteFieldNr="${1:?}"; shift;;
	--first-hour)	shift; firstHour="$1"; shift;;
	--last-hour)	shift; lastHour="$1"; shift;;
	--slots-per-hour)
			shift; slotNum="$1"; shift;;
	--count-field)	shift; countFieldNr="$1"; shift;;
	--default-count)
			shift; defaultCount="$1"; shift;;
	--split-graph-field)
			shift; splitFieldNrs+=("$1"); shift;;
	--as)		sparkArgs+=("$1"); shift
			case "$1" in
			    colorbox-calendar)
				sparkArgs+=(color-fullwidth-boxes)
				: ${DISTRIBUTIONOVERTHEDAY_EMPTY_CELL='  '}
				export SPARK_EMPTY_DATA='  '
				export SPARK_EMPTY=''
				;;
			    green-calendar)
				sparkArgs+=(green-center-boxes)
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_LEGEND='[01m'}
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_BORDER='[38;5;241m'}
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_UNITS='[38;5;241m'}
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_RESET='[0m'}
				: ${DISTRIBUTIONOVERTHEDAY_EMPTY_CELL=' '}
				;;
			    green-large-calendar)
				sparkArgs+=(green-double-center-squares)
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_LEGEND='[01m'}
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_BORDER='[38;5;241m'}
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_UNITS='[38;5;241m'}
				: ${DISTRIBUTIONOVERTHEDAY_COLOR_RESET='[0m'}
				: ${DISTRIBUTIONOVERTHEDAY_EMPTY_CELL='  '}
				;;
			    *)	sparkArgs+=("$1");;
			esac
			shift
			;;
	--)		sparkArgs+=("$1"); shift; break;;
	*)		sparkArgs+=("$1"); shift;;
    esac
done
if [ $hourFieldNr -eq $minuteFieldNr ]; then
    echo >&2 'ERROR: Minute field cannot be equal to hour field.'
    exit 2
elif [ -n "$countFieldNr" ] && [ $countFieldNr -eq $hourFieldNr -o $countFieldNr -eq $minuteFieldNr ]; then
    echo >&2 'ERROR: Count field cannot be equal to hour / minute fields.'
    exit 2
fi

: ${DISTRIBUTIONOVERTHEDAY_EMPTY_CELL= }
: ${DISTRIBUTIONOVERTHEDAY_BORDERS=‚é° ‚é§ ‚é£ ‚é¶}

: ${DISTRIBUTIONOVERTHEDAY_COLOR_BORDER=}  # for DISTRIBUTIONOVERTHEDAY_BORDERS
: ${DISTRIBUTIONOVERTHEDAY_COLOR_LEGEND=}  # for the graph legend
: ${DISTRIBUTIONOVERTHEDAY_COLOR_FOOTER=}  # for the footer legend
: ${DISTRIBUTIONOVERTHEDAY_COLOR_UNITS=}   # for the hours at the bottom of the chart
: ${DISTRIBUTIONOVERTHEDAY_COLOR_GRAPH=}   # for spark graph itself
: ${DISTRIBUTIONOVERTHEDAY_COLOR_RESET=}   # undo the coloring

typeset -a borders=()
[ -n "$DISTRIBUTIONOVERTHEDAY_BORDERS" ] && IFS='' read -r -d '' -a borders <<<"${DISTRIBUTIONOVERTHEDAY_BORDERS// /}"
[ ${#borders[@]} -gt 0 ] && borders[-1]="${borders[-1]%$'\n'}"

IFS=$'\n'
tally()
{
    awk \
	--field-separator "$separator" \
	-v "graphFieldNr=$graphFieldNr" \
	-v "footerFieldNr=$footerFieldNr" \
	-v "hourFieldNr=$hourFieldNr" \
	-v "minuteFieldNr=$minuteFieldNr" \
	-v "firstHour=$firstHour" \
	-v "lastHour=$lastHour" \
	-v "slotNum=$slotNum" \
	-v "countFieldNr=$countFieldNr" \
	-v "defaultCount=$defaultCount" \
	-v "splitFieldNrList=${splitFieldNrs[*]//\\/\\\\}" \
	-v "emptyCell=${DISTRIBUTIONOVERTHEDAY_EMPTY_CELL//\\/\\\\}" \
'
BEGIN {
    splitFieldNrNum = split(splitFieldNrList, splitFieldNrs, "\n")

    emptyCellWithoutAnsiEscapes = gensub(/\x1b\[[0-9:;]*m/, "", "g", emptyCell)
    cellWidth = (emptyCellWithoutAnsiEscapes == "„ÄÄ" ? 2 : length(emptyCellWithoutAnsiEscapes)) # Rudimentary handling of fullwidth characters (just U+3000 IDEOGRAPHIC SPACE).
}
function printSection(      firstGraphedHour, lastGraphedHour, firstSlot, lastSlot, h, remainingLen, result, s)
{
    if (length(count) == 0) return

    print graphLegend; graphLegend = ""
    print footerLegend; footerLegend = ""

    firstGraphedHour = (firstHour == "" ? firstReportedHour : firstHour); firstReportedHour = ""
    lastGraphedHour = (lastHour == "" ? lastReportedHour : lastHour); lastReportedHour = ""
    firstSlot = firstGraphedHour * slotNum
    lastSlot = (lastGraphedHour + 1) * slotNum - 1

    hourWidth = slotNum * cellWidth
    if (hourWidth >= 2) {
	for (h = firstGraphedHour; h <= lastGraphedHour; ++h) {
	    printf("%-" hourWidth "." hourWidth "s", h)
	}
    } else {
	remainingLen = lastSlot - firstSlot + 1
	for (h = firstGraphedHour; h < lastGraphedHour - 1; h += 3) {
	    printf("%-3.3s", h)
	    remainingLen -= 3
	}
	printf("%-" remainingLen "s", (remainingLen < length(lastGraphedHour) ? "" : lastGraphedHour))
    }
    printf "\n"

    result = render(count[firstSlot])
    for (s = firstSlot + 1; s <= lastSlot; ++s) {
	result = result "," render(count[s])
    }
    print result; delete count
}
function render(v)
{
    return (v == "" ? emptyCell : v)
}
{
    for (i in splitFieldNrs) {
	sf = splitFieldNrs[i]
	if ($sf != "" && watchedFields[sf] != "" && watchedFields[sf] != $sf) {
	    printSection()

	    delete watchedFields
	    for (sf in splitFieldNrs) {
		if ($sf != "") watchedFields[sf] = $sf
	    }
	    break
	} else if (watchedFields[sf] == "" && $sf != "") {
	    watchedFields[sf] = $sf
	}
    }

    if (graphFieldNr != "" && graphLegend == "") graphLegend = $graphFieldNr
    if (footerFieldNr != "" && footerLegend == "") footerLegend = $footerFieldNr

    hour = int($hourFieldNr)
    if (firstHour != "" && hour < firstHour) next
    if (lastHour != "" && hour > lastHour) next

    if (firstReportedHour == "" || firstReportedHour > hour) firstReportedHour = hour
    if (lastReportedHour == "" || lastReportedHour < hour) lastReportedHour = hour

    slot = int(hour * slotNum + int($minuteFieldNr) * slotNum / 60)

    if (countFieldNr == "") {
	count[slot] += 1
    } else if ($countFieldNr ~ /^-?[[:digit:]]+$/) {
	count[slot] += int($countFieldNr)
    } else if (defaultCount != "none") {
	if (defaultCount != "") {
	    count[slot] += defaultCount
	}
    } else {
	printf("%s count in line %d: %s\n", ($countFieldNr == "" ? "Missing" : "Invalid"), NR, $0) > "/dev/stderr"
    }
}
END {
    printSection()
}
'
}

printDistribution()
{
    unset previousFooter
    local status=99 footer footerCount=0
    while :
    do
	# Each section consists of 4 lines:
	# - legend for graph
	# - legend for footer
	# - footer
	# - comma-separated data
	local graphLegendFromData; IFS=$'\n' read -r graphLegendFromData || break
	local graphLegend="${graphLegendFromData:-$graphLegendText}"
	local footerLegendFromData; IFS=$'\n' read -r footerLegendFromData || break
	local footerLegend="${footerLegendFromData:-$footerLegendText}"
	IFS=$'\n' read -r footer || break
	local data; IFS=$'\n' read -r data || break

	local sparkEmptyOverride; [ -n "${SPARK_EMPTY+t}" ] || sparkEmptyOverride='SPARK_EMPTY="$DISTRIBUTIONOVERTHEDAY_EMPTY_CELL"'
	local renderedDistribution; renderedDistribution="$(eval "$sparkEmptyOverride" 'spark --min 0 "${sparkArgs[@]}" "$data"')" && status=0 || exit $?

	local legendWidth=$DISTRIBUTIONOVERTHEDAY_LEGEND_LENGTH

	local B="$DISTRIBUTIONOVERTHEDAY_COLOR_BORDER" L="$DISTRIBUTIONOVERTHEDAY_COLOR_LEGEND" F="$DISTRIBUTIONOVERTHEDAY_COLOR_FOOTER" U="$DISTRIBUTIONOVERTHEDAY_COLOR_UNITS" G="$DISTRIBUTIONOVERTHEDAY_COLOR_GRAPH" R="$DISTRIBUTIONOVERTHEDAY_COLOR_RESET"
	if [ "$isFooter" ]; then
	    if [ -z "$legendWidth" ]; then
		legendWidth=$((${#graphLegend} > ${#footerLegend} ? ${#graphLegend} : ${#footerLegend}))
		[ -n "${borders[0]}" ] || let legendWidth+=1
	    fi

	    if [ "$isFooterOnlyOnChange" ]; then
		if [ -n "${previousFooter+t}" -a "$previousFooter" != "$footer" ]; then
		    printf %s "$finalFooter"
		    finalFooter=
		    footerCount=0
		fi
		previousFooter="$footer"
	    fi
	    if [ -n "$footerEvery" ] && [ $((footerCount % footerEvery)) -eq 0 ]; then
		printf %s "$finalFooter"
	    fi

	    printf "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$L" "$graphLegend" "${L:+$R}" "${B}${borders[0]}${B:+$R}" "${G}${renderedDistribution}${G:+$R}" "${B}${borders[1]}${B:+$R}"
	    printf "${footerCapture[@]}" \
		   "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$F" "$footerLegend" "${F:+$R}" "${B}${borders[2]}${B:+$R}" "${U}${footer}${U:+$R}" "${B}${borders[3]}${B:+$R}"

	    let footerCount+=1
	else
	    local completeLegend="$graphLegend"; [ -n "$graphLegend" -a -n "$footerLegend" ] && completeLegend+=' '; completeLegend+="$footerLegend"
	    printf "%s%${legendWidth:+-}${legendWidth}${legendWidth:+.}${legendWidth}s%s%s\\n" "$L" "$completeLegend" "${L:+$R}" "${G}${renderedDistribution}${G:+$R}"
	fi
    done

    [ -z "$finalFooter" ] || printf %s "$finalFooter"
    return $status
}

tally | printDistribution
