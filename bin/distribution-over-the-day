#!/bin/bash

: ${DISTRIBUTIONOVERTHEDAY_BORDERS=⎡ ⎤ ⎣ ⎦}
typeset -a borders=()
[ -n "$DISTRIBUTIONOVERTHEDAY_BORDERS" ] && IFS='' read -r -d '' -a borders <<<"${DISTRIBUTIONOVERTHEDAY_BORDERS// /}"
[ ${#borders[@]} -gt 0 ] && borders[-1]="${borders[-1]%$'\n'}"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf "Usage: echo -e '11:01\n11:30\n12:00\n...'| [DISTRIBUTIONOVERTHEDAY_BORDERS='/ \ L J'] [DISTRIBUTIONOVERTHEDAY_LEGEND_LENGTH=N] %q %s\\n" "$(basename "$1")" '[--no-footer] [--graph-legend TEXT] [--graph-field N] [--footer-legend TEXT] [--footer-field N] [--first-hour HH] [--last-hour HH] [--slots-per-hour N] [--split-graph-field N [--split-graph-field ...]] [SPARK-ARGS ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the distribution of the number of times that fall into a certain slot (15
minutes by default) over the day; i.e. from morning to evening. Requires HH:MM
in the first column of the data; anything after that (separated by : or
whitespace, e.g. HH:MM:SS or HH:MM text) is ignored.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --no-footer		Omit the footer that shows the hours.
    --graph-legend TEXT	Add TEXT in front of the distribution. This will also be
			the fallback text if no field value is found.
    --graph-field N	Add text captured from the first non-empty column N of
			the input data in front of the distribution.
    --footer-legend TEXT
			Add TEXT in front of the footer. If --no-footer, this
			will be put after the graph legend instead. This will
			also be the fallback text if no field value is found.
    --footer-field N	Add text captured from the first non-empty column N of
			the input data in front of the footer. If --no-footer,
			this will be put after the graph legend instead.
    --first-hour HH	Start the distribution at HH:00 (omitting any earlier
			values).
    --last-hour HH	End the distribution after HH:59 (omitting any later
			values).
    --slots-per-hour N	Divide each hour into N slots (comprising 60 / N
			minutes); default is 4 / 15 minutes.
    --split-graph-field N
			Whenever the non-empty value of column N changes, start
			a new graph. If you want to graph every day separately,
			pass the day (and month and year if data may have large
			gaps in between) columns here. HELPTEXT
HELPTEXT
}

typeset -a sparkArgs=()
graphLegendText=
graphFieldNr=
footerLegendText=
footerFieldNr=
isFooter=t
firstHour=
lastHour=
slotNum=4
typeset -a splitFieldNrs=()
typeset -a sparkArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-footer)	shift; isFooter=;;
	--graph-legend)	shift; graphLegendText="$1"; shift;;
	--graph-field)	shift; graphFieldNr="$1"; shift;;
	--footer-legend)
			shift; footerLegendText="$1"; shift;;
	--footer-field)	shift; footerFieldNr="$1"; shift;;
	--first-hour)	shift; firstHour="$1"; shift;;
	--last-hour)	shift; lastHour="$1"; shift;;
	--slots-per-hour)
			shift; slotNum="$1"; shift;;
	--split-graph-field)
			shift; splitFieldNrs+=("$1"); shift;;
	--)		sparkArgs+=("$1"); shift; break;;
	*)		sparkArgs+=("$1"); shift;;
    esac
done

IFS=$'\n'
tally()
{
    awk \
	--field-separator '[[:space:]:]' \
	-v "graphFieldNr=$graphFieldNr" \
	-v "footerFieldNr=$footerFieldNr" \
	-v "firstHour=$firstHour" \
	-v "lastHour=$lastHour" \
	-v "slotNum=$slotNum" \
	-v "splitFieldNrList=${splitFieldNrs[*]//\\/\\\\}" \
'
BEGIN {
    splitFieldNrNum = split(splitFieldNrList, splitFieldNrs, "\n")
}
function printSection()
{
    print graphLegend; graphLegend = ""
    print footerLegend; footerLegend = ""

    if (firstHour == "") firstHour = firstReportedHour
    if (lastHour == "") lastHour = lastReportedHour
    firstSlot = firstHour * slotNum
    lastSlot = (lastHour + 1) * slotNum - 1

    if (slotNum >= 2) {
	for (h = firstHour; h <= lastHour; ++h) {
	    printf("%-" slotNum "." slotNum "s", h)
	}
    } else {
	remainingLen = lastSlot - firstSlot + 1
	for (h = firstHour; h < lastHour - 1; h += 3) {
	    printf("%-3.3s", h)
	    remainingLen -= 3
	}
	printf("%-" remainingLen "s", (remainingLen < length(lastHour) ? "" : lastHour))
    }
    printf "\n"

    result = render(hourCount[firstSlot])
    for (s = firstSlot + 1; s <= lastSlot; ++s) {
	result = result "," render(hourCount[s])
    }
    print result; delete hourCount
}
function render(v)
{
    return (v == "" ? " " : v)
}
{
    for (i in splitFieldNrs) {
	sf = splitFieldNrs[i]
	if ($sf != "" && watchedFields[sf] != "" && watchedFields[sf] != $sf) {
	    printSection()

	    delete watchedFields
	    for (sf in splitFieldNrs) {
		if ($sf != "") watchedFields[sf] = $sf
	    }
	    break
	} else if (watchedFields[sf] == "" && $sf != "") {
	    watchedFields[sf] = $sf
	}
    }

    hour = int($1)
    if (firstHour != "" && hour < firstHour) next
    if (lastHour != "" && hour > lastHour) next

    if (firstReportedHour == "" || firstReportedHour > hour) firstReportedHour = hour
    if (lastReportedHour == "" || lastReportedHour < hour) lastReportedHour = hour

    if (graphFieldNr != "" && graphLegend == "") graphLegend = $graphFieldNr
    if (footerFieldNr != "" && footerLegend == "") footerLegend = $footerFieldNr

    slot = int(hour * slotNum + $2 * slotNum / 60)
    hourCount[slot] += 1
}
END {
    printSection()
}
'
}

printDistribution()
{
    while :
    do
	# First line is the footer; following line is the distribution data to be
	# graphed.
	local graphLegendFromData; IFS=$'\n' read -r graphLegendFromData || break
	local graphLegend="${graphLegendFromData:-$graphLegendText}"
	local footerLegendFromData; IFS=$'\n' read -r footerLegendFromData || break
	local footerLegend="${footerLegendFromData:-$footerLegendText}"
	local footer; IFS=$'\n' read -r footer || break
	local data; IFS=$'\n' read -r data || break

	local renderedDistribution; renderedDistribution="$(printf '%s\n' "$data" | spark --min 0 "${sparkArgs[@]}")"

	local legendWidth=$DISTRIBUTIONOVERTHEDAY_LEGEND_LENGTH

	if [ "$isFooter" ]; then
	    if [ -z "$legendWidth" ]; then
		legendWidth=$((${#graphLegend} > ${#footerLegend} ? ${#graphLegend} : ${#footerLegend}))
		[ -n "${borders[0]}" ] || let legendWidth+=1
	    fi

	    printf "%-${legendWidth}.${legendWidth}s%s%s%s\\n" "$graphLegend" "${borders[0]}" "$renderedDistribution" "${borders[1]}"
	    printf "%-${legendWidth}.${legendWidth}s%s%s%s\\n" "$footerLegend" "${borders[2]}" "$footer" "${borders[3]}"
	else
	    local completeLegend="$graphLegend"; [ -n "$graphLegend" -a -n "$footerLegend" ] && completeLegend="${completeLegend} "; completeLegend="${completeLegend}${footerLegend}"
	    printf "%${legendWidth:+-}${legendWidth}${legendWidth:+.}${legendWidth}s%s\\n" "$completeLegend" "$renderedDistribution"
	fi
    done
}

eval "${inputSource}${inputSource:+|}" tally | printDistribution
