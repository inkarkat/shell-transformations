#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '--avg|--count|--join SEP|--max|--min|--sum|--unique-counts|--total-and-unique-counts [--has-header] -g|--group-by [-]N|HEADER-NAME [--result-first] [--sort-by [+-]group|[+-]result] [-F|--field-separator FIELD-SEPARATOR] [-s|--output-separator OUTPUT-SEPARATOR] [-]N|HEADER-NAME ...'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--input FILESPEC [-i ...] ... [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Aggregate numbers in field(s) N (-N counted from behind) / field(s) with
HEADER-NAME (implies --has-header), and print the result(s).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --avg		Calculate the average.
    --count		Count the number of non-empty fields.
    --join SEP		Concatenate all field values with SEP in between.
    --max		Find the maximum.
    --min		Find the minimum.
    --sum		Calculate the sum.
    --unique-counts	Count the number of unique values and report each
			separately (sorted alphabetically by value).
    --total-and-unique-counts
			Count the number of unique values and report the total
			and each number separately (sorted alphabetically by
			value).
    --has-header	First line is a header; use to look up HEADER-NAME, skip
			it for calculation.
    --group-by|-g [-]N|HEADER-NAME
			Aggregate numbers separately for each unique value in
			(single) field N / with HEADER-NAME. Report the result for
			each group as GROUP OFS RESULT1 [OFS RESULT2 ...].
    --result-first	Report as RESULT1 [OFS RESULT2 ...] OFS GROUP.
    --sort-by [+-]group|[+-]result
			Sort the output by group or result (left to right),
			ascending (+) or descending (-).
EXIT STATUS:
    99	If no numbers were encountered.
HELPTEXT
}

typeset -a fsArgs
typeset -a awkArgs=()
outputSeparator=
hasHeader=
groupBy=
isResultFirst=
sorter=
aggregator=
joinSeparator=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--avg|--count|--max|--min|--sum|--unique-counts|--total-and-unique-counts)
			aggregator="${1#--}"; shift;;
	--join)		aggregator="${1#--}"; shift; joinSeparator="${1?}"; shift;;
	--has-header)	shift; hasHeader=t;;
	--group-by|-g)	shift; groupBy="${1:?}"; shift;;
	--result-first)	shift; isResultFirst=t;;
	--sort-by)	shift
			case "${1:?}" in
			    ?(+)group)	sorter='@ind_str_asc';;
			    -group)	sorter='@ind_str_desc';;
			    ?(+)result)	sorter='groupValueAsc';;
			    -result)	sorter='groupValueDesc';;
			    *)		{ echo "ERROR: Unknown sort order: $1"; echo; printUsage "$0"; } >&2; exit 2;;
			esac
			shift
			;;
	--input|-i)		shift; awkArgs+=("$1"); shift;;
	--field-separator|-F)	shift; fsArgs=(-F "$1"); shift;;
	--output-separator|-s)
			shift; outputSeparator="${1?}"; shift;;
	--)		shift; break;;
	-+([0-9]))	break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0"
    exit 2
elif [ -z "$aggregator" ]; then
    echo 'ERROR: No aggregator passed: One of --avg|--count|--join SEP|--max|--min|--sum.'
    echo
    printUsage "$0"
    exit 2
fi >&2


typeset -A valueKeyers=(
    [unique-counts]='function valueKeyer(val) { return val; }'
    [total-and-unique-counts]='function valueKeyer(val) { return val; }'
)
typeset -A aggregators=(
    [avg]='function aggregate(acc, val) { return acc + val; }'
    [count]='function aggregate(acc, val) { return acc + (val == "" ? 0 : 1); }'
    [join]='function aggregate(acc, val) { return acc (acc == "" ? "" : joinSeparator) val; }'
    [max]='function aggregate(acc, val) { return (acc == "" || val > acc ? val : acc); }'
    [min]='function aggregate(acc, val) { return (acc == "" || val < acc ? val : acc); }'
    [sum]='function aggregate(acc, val) { return acc + val; }'
    [unique-counts]='function aggregate(acc, val) { return ++acc; }'
    [total-and-unique-counts]='function aggregate(acc, val) { return ++acc; }'
)
typeset -A reporters=(
    [avg]="function report(acc) { return acc / (NR${hasHeader:+- 1}); }"
    [unique-counts]='function report(acc,      result, saveSorter)
    {
	saveSorter = PROCINFO["sorted_in"]
	PROCINFO["sorted_in"] = "@ind_str_asc"
	for (val in acc) {
	    result = result (result == "" ? "" : OFS) val ": " acc[val]
	}
	PROCINFO["sorted_in"] = saveSorter
	return result
    }'
    [total-and-unique-counts]='function report(acc,      result, total, saveSorter)
    {
	saveSorter = PROCINFO["sorted_in"]
	PROCINFO["sorted_in"] = "@ind_str_asc"
	for (val in acc) {
	    result = result (result == "" ? "" : OFS) val ": " acc[val]
	    total += acc[val]
	}
	PROCINFO["sorted_in"] = saveSorter
	return total OFS result
    }'
)

IFS=$'\n'
awk \
    "${fsArgs[@]}" \
    -v "outputSeparator=${outputSeparator//\\/\\\\}" \
    -v "hasHeader=$hasHeader" \
    -v "aggregateFieldList=${*//\\/\\\\}" \
    -v "groupByFieldSpecifier=${groupBy//\\/\\\\}" \
    -v "isResultFirst=$isResultFirst" \
    -v "sorter=$sorter" \
    -v "joinSeparator=${joinSeparator//\\/\\\\}" \
"${valueKeyers[$aggregator]:-function valueKeyer(val) { return ""; \}}
${aggregators[$aggregator]}
${reporters[$aggregator]:-function report(acc) { return acc; \}}
"'
function offsetSort(i1, v1, i2, v2)
{
    if (i1 < 0 && i2 > 0) {
	return 1
    } else if (i1 > 0 && i2 < 0) {
	return -1
    } else {
	return i1 - i2
    }

}
function groupValueAsc(i1, v1, i2, v2,      cmp, saveSorter, j)
{
    cmp = 0
    saveSorter = PROCINFO["sorted_in"]
    PROCINFO["sorted_in"] = "offsetSort"
	for (j in v1) {
	    if (v1[j] != v2[j]) {
		cmp = v1[j] - v2[j]
		break
	    }
	}
    PROCINFO["sorted_in"] = saveSorter
    return cmp
}
function groupValueDesc(i1, v1, i2, v2)
{
    return groupValueAsc(i2, v2, i1, v1)
}
function getFieldNr(fieldOffset)
{
    return (fieldOffset ~ /^-/ ? NF + fieldOffset + 1 : fieldOffset)
}
function aggregateRecord(      keyFieldNr, valueFieldOffset, valueFieldNr)
{
    for (valueFieldOffset in aggregateFields) {
	valueFieldNr = getFieldNr(valueFieldOffset)
	if (valueFieldNr > NF) return

	valueKey = valueKeyer($valueFieldNr)
	if (groupByFieldSpecifier == "") {
	    if (valueKey == "") {
		aggregateFields[valueFieldOffset] = aggregate(aggregateFields[valueFieldOffset], $valueFieldNr)
	    } else {
		aggregateFields[valueFieldOffset][valueKey] = aggregate(aggregateFields[valueFieldOffset][valueKey], $valueFieldNr)
	    }
	} else {
	    keyFieldNr = getFieldNr(groupByFieldNr)
	    if (valueKey == "") {
		groupResults[$keyFieldNr][valueFieldOffset] = aggregate(groupResults[$keyFieldNr][valueFieldOffset], $valueFieldNr)
	    } else {
		groupResults[$keyFieldNr][valueFieldOffset][valueKey] = aggregate(groupResults[$keyFieldNr][valueFieldOffset][valueKey], $valueFieldNr)
	    }
	}
    }
}
NR == 1 {
    # Use passed OUTPUT-SEPARATOR, fall back to FS unless it is a regular expression.
    if (outputSeparator != "") {
	OFS = outputSeparator
    } else {
	firstTwoFields = $1 FS $2
	if (NF < 2 || substr($0, 1, length(firstTwoFields)) == firstTwoFields) {
	    OFS = FS
	} else if (FS == " ") {
	    OFS = ((substr($0, 1, length(firstTwoFields)) == $1 "\t" $2) ? "\t" : " ")
	} else {
	    print "Note: Using space as default output field separator; change via -s|--output-separator OUTPUT-SEPARATOR or pass a non-regular expression -F|--field-separator FIELD-SEPARATOR." > "/dev/stderr"
	}
    }

    if (groupByFieldSpecifier ~ /^-?[0-9]+$/) {
	groupByFieldNr = groupByFieldSpecifier
	if (getFieldNr(groupByFieldNr) <= 0 || getFieldNr(groupByFieldNr) > NF) {
	    printf "ERROR: No field number %d in\n%s\n", groupByFieldNr, $0 > "/dev/stderr"
	    exit 3
	}
    } else if (groupByFieldSpecifier != "") {
	if (! hasHeader) {
	    print "ERROR: Need --has-header with HEADER-NAME: " groupByFieldSpecifier > "/dev/stderr"
	    exit 2
	}

	for (groupByFieldNr = 1; groupByFieldNr <= NF; groupByFieldNr++) {
	    if ($groupByFieldNr == groupByFieldSpecifier) {
		isFoundGroupByField = 1
		break
	    }
	}
	if (! isFoundGroupByField) {
	    printf "ERROR: Could not locate field named %s in\n%s\n", groupByFieldSpecifier, $0 > "/dev/stderr"
	    exit 3
	}
    }

    N = split(aggregateFieldList, aggregateFieldSpecifiers, "\n")
    for (i = 1; i <= N; ++i) {
	isFoundAggregateField = 0
	specifier = aggregateFieldSpecifiers[i]
	if (specifier ~ /^-?[0-9]+$/) {
	    aggregateFields[specifier] = ""
	    if (getFieldNr(specifier) <= 0 || getFieldNr(specifier) > NF) {
		printf "ERROR: No field number %d in\n%s\n", specifier, $0 > "/dev/stderr"
		exit 3
	    }
	} else {
	    if (! hasHeader) {
		print "ERROR: Need --has-header with HEADER-NAME: " specifier > "/dev/stderr"
		exit 2
	    }

	    for (fieldNr = 1; fieldNr <= NF; fieldNr++) {
		if ($fieldNr == specifier) {
		    aggregateFields[fieldNr] = ""
		    isFoundAggregateField = 1
		    break
		}
	    }
	    if (! isFoundAggregateField) {
		printf "ERROR: Could not locate field named %s in: %s\n", specifier, $0 > "/dev/stderr"
		exit 3
	    }
	}
    }

    if (! hasHeader) {
	# No header; need to aggregate first line, too.
	aggregateRecord()
    }
}

NR > 1 {
    aggregateRecord()
}

END {
    if (groupByFieldSpecifier == "") {
	PROCINFO["sorted_in"] = "offsetSort"
	for (valueFieldOffset in aggregateFields) {
	    fieldResult = report(aggregateFields[valueFieldOffset])
	    if (fieldResult != "") {
		result = result (result == "" ? "" : OFS) fieldResult
	    }
	}
	if (result == "") {
	    exit 99
	} else {
	    print result
	}
    } else {
	if (length(groupResults) == 0) {
	    exit 99
	} else {
	    if (sorter != "") {
		PROCINFO["sorted_in"] = sorter
	    }
	    for (key in groupResults) {
		result = ""
		PROCINFO["sorted_in"] = "offsetSort"
		for (valueFieldOffset in groupResults[key]) {
		    fieldResult = report(groupResults[key][valueFieldOffset])
		    if (fieldResult != "") {
			result = result (result == "" ? "" : OFS) fieldResult
		    }
		}
		if (isResultFirst) {
		    printf("%s%s%s\n", result, OFS, key)
		} else {
		    printf("%s%s%s\n", key, OFS, result)
		}
	    }
	}
    }
}
' "${awkArgs[@]}"
