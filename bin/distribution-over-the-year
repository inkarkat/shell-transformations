#!/bin/bash

: ${DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL= }
: ${DISTRIBUTIONOVERTHEYEAR_BORDERS=‚é° ‚é§ ‚é¢ ‚é• ‚é£ ‚é¶}

: ${DISTRIBUTIONOVERTHEYEAR_COLOR_BORDER=}  # for DISTRIBUTIONOVERTHEYEAR_BORDERS
: ${DISTRIBUTIONOVERTHEYEAR_COLOR_LEGEND=}  # for the graph legend
: ${DISTRIBUTIONOVERTHEYEAR_COLOR_FOOTER=}  # for the footer legend
: ${DISTRIBUTIONOVERTHEYEAR_COLOR_UNITS=}   # for the weekdays left of the chart and the months at the bottom of the chart
: ${DISTRIBUTIONOVERTHEYEAR_COLOR_RESET=}   # undo the coloring

typeset -a borders=()
[ -n "$DISTRIBUTIONOVERTHEYEAR_BORDERS" ] && IFS='' read -r -d '' -a borders <<<"${DISTRIBUTIONOVERTHEYEAR_BORDERS// /}"
[ ${#borders[@]} -gt 0 ] && borders[-1]="${borders[-1]%$'\n'}"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf "Usage: echo -e '2021-12-31 11:01\\\\n2022-01-11 12:00\\\\n...'| [DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL='-'] [DISTRIBUTIONOVERTHEYEAR_BORDERS='/ \ ( ) L J'] [DISTRIBUTIONOVERTHEYEAR_LEGEND_LENGTH=N] %q %s\\n" "$(basename "$1")" '[--no-footer|--final-footer-only|--footer-only-on-change|--footer-every N] [--graph-legend TEXT] [--graph-field N] [--footer-legend TEXT] [--footer-field N] [-F|--field-separator FS] [--weekly] [--year YYYY |--year-field Y] [--month-field M] [--day-field D] [--count-field C [--default-count C|""]] [--split-graph-field N [--split-graph-field ...]] [--as colorbox-calendar|green-[large-]calendar] [SPARK-ARGS ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the distribution of the number of dates that fall onto a certain day over
the year; i.e. from the first until the last day of the year. Requires the month
and day of the year in the second / third column of the data (after year);
anything after that is ignored.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --no-footer		Omit the footer that shows the months.
    --final-footer-only	Omit the footer on all graphs but the very last.
    --footer-only-on-change
			Only print a footer if it changed vs. the previous one.
			The text captured by --footer-field is not considered
			here.
    --footer-every N	Print the footer on every N'th graph. Can be combined
			with --footer-only-on-change.
    --graph-legend TEXT	Add TEXT in front of the distribution. This will also be
			the fallback text if no field value is found.
    --graph-field N	Add text captured from the first non-empty column N of
			the input data in front of the distribution.
    --footer-legend TEXT
			Add TEXT in front of the footer. If --no-footer, this
			will be put after the graph legend instead. This will
			also be the fallback text if no field value is found.
    --footer-field N	Add text captured from the first non-empty column N of
			the input data in front of the footer. If --no-footer,
			this will be put after the graph legend instead.
    --field-separator|-F FS
			Use FS for splitting the data into columns (instead of
			the default whitespace + [:_/-]).
    --weekly		Aggregate entire weeks instead of individual days.
    --year YYYY		Assume a static year YYYY.
    --year-field Y	Take the year from column Y instead of 1.
    --month-field M	Take the month of the year from column M instead of 2.
    --day-field D	Take the day of the year from column D instead of 3.
    --count-field C	Increment the number of dates by the value found in
			column C (instead of by 1); i.e. the data already is
			pre-accumulated.
    --default-count C	Use a count of C if the count column does not contain an
			integer or is missing. Suppresses the warning that would
			normally be given then.
    --split-graph-field N
			Whenever the non-empty value of column N changes, start
			a new graph. If you want to graph every year
			separately, pass the year column here.
    --as NAME-calendar	Special out-of-the-box spark style customizations.
HELPTEXT
}

typeset -a sparkArgs=()
graphLegendText=
graphFieldNr=
footerLegendText=
footerFieldNr=
separator='[[:space:]:_/-]'
isWeekly=
year=
yearFieldNr=1
monthFieldNr=2
dayFieldNr=3
countFieldNr=
defaultCount=none
isFooter=t
finalFooter=
typeset -a footerCapture=()
isFooterOnlyOnChange=
footerEvery=
typeset -a splitFieldNrs=()
typeset -a sparkArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-footer)	shift; isFooter=;;
	--final-footer-only)
			shift; footerCapture=(-v finalFooter);;
	--footer-only-on-change)
			shift; footerCapture=(-v finalFooter); isFooterOnlyOnChange=t;;
	--footer-every)	shift; footerEvery="${1:?}"; shift; footerCapture=(-v finalFooter);;
	--graph-legend)	shift; graphLegendText="$1"; shift;;
	--graph-field)	shift; graphFieldNr="$1"; shift;;
	--footer-legend)
			shift; footerLegendText="$1"; shift;;
	--footer-field)	shift; footerFieldNr="$1"; shift;;
	--field-separator|-F)
			shift; separator="${1:?}"; shift;;
	--weekly)	shift; isWeekly=t;;
	--year)		shift; year="${1:?}"; shift;;
	--year-field)	shift; yearFieldNr="${1:?}"; shift;;
	--month-field)  shift; monthFieldNr="${1:?}"; shift;;
	--day-field)    shift; dayFieldNr="${1:?}"; shift;;
	--count-field)	shift; countFieldNr="$1"; shift;;
	--default-count)
			shift; defaultCount="$1"; shift;;
	--split-graph-field)
			shift; splitFieldNrs+=("$1"); shift;;
	--as)		sparkArgs+=("$1"); shift
			case "$1" in
			    colorbox-calendar)
				sparkArgs+=(color-fullwidth-boxes)
				DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL='  '
				export SPARK_EMPTY_DATA='  '
				export SPARK_EMPTY=''
				;;
			    green-calendar)
				sparkArgs+=(green-center-boxes)
				DISTRIBUTIONOVERTHEYEAR_COLOR_LEGEND='[01m'
				DISTRIBUTIONOVERTHEYEAR_COLOR_BORDER='[38;5;241m'
				DISTRIBUTIONOVERTHEYEAR_COLOR_UNITS='[38;5;241m'
				DISTRIBUTIONOVERTHEYEAR_COLOR_RESET='[0m'
				[ "$isWeekly" ] && \
				    DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL=' ' || \
				    DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL='[38;5;253mü≠Ω[0m'
				;;
			    green-large-calendar)
				sparkArgs+=(green-double-center-squares)
				DISTRIBUTIONOVERTHEYEAR_COLOR_LEGEND='[01m'
				DISTRIBUTIONOVERTHEYEAR_COLOR_BORDER='[38;5;241m'
				DISTRIBUTIONOVERTHEYEAR_COLOR_UNITS='[38;5;241m'
				DISTRIBUTIONOVERTHEYEAR_COLOR_RESET='[0m'
				[ "$isWeekly" ] && \
				    DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL='  ' || \
				    DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL='[38;5;253mü≠Ω‚ñî[0m'
				;;
			    *)	sparkArgs+=("$1");;
			esac
			shift
			;;
	--)		sparkArgs+=("$1"); shift; break;;
	*)		sparkArgs+=("$1"); shift;;
    esac
done
if [ $yearFieldNr -eq $monthFieldNr ]; then
    echo >&2 'ERROR: Month field cannot be equal to year field.'
    exit 2
elif [ $monthFieldNr -eq $dayFieldNr ]; then
    echo >&2 'ERROR: Day field cannot be equal to month field.'
    exit 2
elif [ $yearFieldNr -eq $dayFieldNr ]; then
    echo >&2 'ERROR: Day field cannot be equal to year field.'
    exit 2
elif [ -n "$countFieldNr" ] && [ $countFieldNr -eq $yearFieldNr -o $countFieldNr -eq $monthFieldNr -o $countFieldNr -eq $dayFieldNr ]; then
    echo >&2 'ERROR: Count field cannot be equal to year / month / day fields.'
    exit 2
fi

IFS=$'\n'
tally()
{
    awk \
	--field-separator "$separator" \
	-v "isWeekly=$isWeekly" \
	-v "graphFieldNr=$graphFieldNr" \
	-v "footerFieldNr=$footerFieldNr" \
	-v "year=$year" \
	-v "yearFieldNr=$yearFieldNr" \
	-v "monthFieldNr=$monthFieldNr" \
	-v "dayFieldNr=$dayFieldNr" \
	-v "countFieldNr=$countFieldNr" \
	-v "defaultCount=$defaultCount" \
	-v "splitFieldNrList=${splitFieldNrs[*]//\\/\\\\}" \
	-v "emptyCell=${DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL//\\/\\\\}" \
'
BEGIN {
    splitFieldNrNum = split(splitFieldNrList, splitFieldNrs, "\n")
    if (isWeekly) {
	split(" Jan ,Feb ,Mar  ,Apr ,May ,Jun  ,Jul ,Aug ,Sep  ,Oct ,Nov ,Dec   ", monthLegend, /,/)
    } else {
	split("Jan ,Feb ,Mar  ,Apr ,May  ,Jun ,Jul ,Aug  ,Sep ,Oct ,Nov  ,Dec   ", monthLegend, /,/)
    }

    emptyCellWithoutAnsiEscapes = gensub(/\x1b\[[0-9:;]*[mK]/, "", "g", emptyCell)
    cellWidth = (emptyCellWithoutAnsiEscapes == "„ÄÄ" ? 2 : length(emptyCellWithoutAnsiEscapes)) # Rudimentary handling of fullwidth characters (just U+3000 IDEOGRAPHIC SPACE).

    WEEK_OF_YEAR_FORMAT = ENVIRON["DISTRIBUTIONOVERTHEYEAR_WEEK_OF_YEAR_FORMAT"]
    if (WEEK_OF_YEAR_FORMAT == "") WEEK_OF_YEAR_FORMAT="%W"
}
function printFooter(      footer, i, j)
{
    for (i = 1; i <= 12; ++i) {
	footer = footer monthLegend[i]
	for (j = 2; j <= cellWidth; ++j) {
	    # Need to stretch the footer if a cell is wider than one character.
	    footer = footer gensub(/./, " ", "g", monthLegend[i])
	}
    }
    print footer
}
function printDailySection(      d, result, s)
{
    for (d = 0; d < 7; ++d) {
	result = ""
	for (s = 1; s < 366 + 7; s += 7) {
	    result = result (s == 1 ? "" : ",") render(count[s + d])
	}
	print result
    }
}
function printWeeklySection(      w, result)
{
    result = render(count[0])
    for (w = 1; w <= 53 ; ++w) {
	result = result "," render(count[w])
    }
    print result
}
function printSection()
{
    if (length(count) == 0) return

    print graphLegend; graphLegend = ""
    print footerLegend; footerLegend = ""

    printFooter()
    if (isWeekly) {
	printWeeklySection()
    } else {
	printDailySection()
    }
    delete count
}
function render(v)
{
    return (v == "" ? emptyCell : v)
}
{
    for (i in splitFieldNrs) {
	sf = splitFieldNrs[i]
	if ($sf != "" && watchedFields[sf] != "" && watchedFields[sf] != $sf) {
	    printSection()

	    delete watchedFields
	    for (sf in splitFieldNrs) {
		if ($sf != "") watchedFields[sf] = $sf
	    }
	    break
	} else if (watchedFields[sf] == "" && $sf != "") {
	    watchedFields[sf] = $sf
	}
    }

    if (graphFieldNr != "" && graphLegend == "") graphLegend = $graphFieldNr
    if (footerFieldNr != "" && footerLegend == "") footerLegend = $footerFieldNr

    thisYear = (year == "" ? $yearFieldNr : year)
    epoch = mktime(thisYear " " $monthFieldNr " " $dayFieldNr " 12 00 00")
    if (epoch == -1) {
	printf("Invalid date in line %d: %s\n", NR, $0) > "/dev/stderr"
	next
    }

    if (isWeekly) {
	slot = int(strftime(WEEK_OF_YEAR_FORMAT, epoch))
    } else {
	dayOfYear = int(strftime("%j", epoch))
	firstDayEpoch = mktime(thisYear " 01 01 12 00 00")
	dayOfWeekOffset = int(strftime("%u", firstDayEpoch)) - 1 # Map the same weekday of different years to the same slot; it is less important if something happened Apr-1 or Apr-3, but rather whether it happened on the first Monday of April.

	slot = dayOfYear + dayOfWeekOffset
    }

    if (countFieldNr == "") {
	count[slot] += 1
    } else if ($countFieldNr ~ /^-?[[:digit:]]+$/) {
	count[slot] += int($countFieldNr)
    } else if (defaultCount != "none") {
	if (defaultCount != "") {
	    count[slot] += defaultCount
	}
    } else {
	printf("%s count in line %d: %s\n", ($countFieldNr == "" ? "Missing" : "Invalid"), NR, $0) > "/dev/stderr"
    }
}
END {
    printSection()
}
'
}

printDailyDistribution()
{
    unset previousFooter
    local status=99 footer footerCount=0
    while :
    do
	# Each section consists of 10 lines:
	# - legend for graph
	# - legend for footer
	# - footer
	# - comma-separated data for Mondays
	# - comma-separated data for Tuesdays
	# ...
	# - comma-separated data for Sundays
	local graphLegendFromData; IFS=$'\n' read -r graphLegendFromData || break
	local graphLegend="${graphLegendFromData:-$graphLegendText}"
	local footerLegendFromData; IFS=$'\n' read -r footerLegendFromData || break
	local footerLegend="${footerLegendFromData:-$footerLegendText}"
	local legendWidth=$DISTRIBUTIONOVERTHEYEAR_LEGEND_LENGTH

	if [ -z "$legendWidth" ]; then
	    legendWidth=$((${#graphLegend} > ${#footerLegend} ? ${#graphLegend} : ${#footerLegend}))
	    [ -n "${borders[0]}" ] || let legendWidth+=1
	fi

	IFS=$'\n' read -r footer || break
	local wholeWeekData= weekdayData= i
	for ((i = 0; i < 7; i++))
	do
	    IFS=$'\n' read -r weekdayData || break
	    wholeWeekData+="${wholeWeekData:+$',\n,'}${weekdayData}"
	done

	local sparkEmptyOverride; [ -n "${SPARK_EMPTY+t}" ] || sparkEmptyOverride='SPARK_EMPTY="$DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL"'
	readarray -t renderedLines < <(eval "$sparkEmptyOverride" 'spark --min 0 "${sparkArgs[@]}" "$wholeWeekData"'; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
	[ ${renderedLines[-1]} -eq 0 ] && status=0 || exit ${renderedLines[-1]}
	unset 'renderedLines[-1]'
	[ -z "${renderedLines[-1]}" ] && unset 'renderedLines[-1]'


	if [ "$isFooter" ]; then
	    if [ "$isFooterOnlyOnChange" ]; then
		if [ -n "${previousFooter+t}" -a "$previousFooter" != "$footer" ]; then
		    printf %s "$finalFooter"
		    finalFooter=
		    footerCount=0
		fi
		previousFooter="$footer"
	    fi
	    if [ -n "$footerEvery" ] && [ $((footerCount % footerEvery)) -eq 0 ]; then
		printf %s "$finalFooter"
	    fi
	fi

	local B="$DISTRIBUTIONOVERTHEYEAR_COLOR_BORDER" L="$DISTRIBUTIONOVERTHEYEAR_COLOR_LEGEND" F="$DISTRIBUTIONOVERTHEYEAR_COLOR_FOOTER" U="$DISTRIBUTIONOVERTHEYEAR_COLOR_UNITS" R="$DISTRIBUTIONOVERTHEYEAR_COLOR_RESET"
	    printf "%s%${legendWidth}.${legendWidth}s%s%s%s%s\\n"  "$U" "${isFooter:+Mon}"	"$R" "${B}${borders[0]}${R}" "${renderedLines[0]}" "${B}${borders[1]}${R}"
	    printf "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$U" ''			"$R" "${B}${borders[2]}${R}" "${renderedLines[1]}" "${B}${borders[3]}${R}"
	    printf "%s%${legendWidth}.${legendWidth}s%s%s%s%s\\n"  "$U" "${isFooter:+Wed}"	"$R" "${B}${borders[2]}${R}" "${renderedLines[2]}" "${B}${borders[3]}${R}"
	    printf "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$U" ''			"$R" "${B}${borders[2]}${R}" "${renderedLines[3]}" "${B}${borders[3]}${R}"
	    printf "%s%${legendWidth}.${legendWidth}s%s%s%s%s\\n"  "$U" "${isFooter:+Fri}"	"$R" "${B}${borders[2]}${R}" "${renderedLines[4]}" "${B}${borders[3]}${R}"
	if [ "$isFooter" ]; then
	    printf "%s%${legendWidth}.${legendWidth}s%s%s%s%s\\n"  "$U" ''			"$R" "${B}${borders[2]}${R}" "${renderedLines[5]}" "${B}${borders[3]}${R}"
	    printf "%s%${legendWidth}.${legendWidth}s%s%s%s%s\\n"  "$L" "$graphLegend"		"$R" "${B}${borders[4]}${R}" "${renderedLines[6]}" "${B}${borders[5]}${R}"

	    printf "${footerCapture[@]}" \
		   "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$F" "$footerLegend"		"$R" "${U}${borders[4]//?/ }" "$footer" "${borders[5]//?/ }${R}"

	    let footerCount+=1
	else
	    printf "%s%${legendWidth}.${legendWidth}s%s%s%s%s\\n"  "$L" "$graphLegend"		"$R" "${B}${borders[2]}${R}" "${renderedLines[5]}" "${B}${borders[3]}${R}"
	    printf "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$F" "$footerLegend"		"$R" "${B}${borders[4]}${R}" "${renderedLines[6]}" "${B}${borders[5]}${R}"
	fi
    done

    [ -z "$finalFooter" ] || printf %s "$finalFooter"
    return $status
}
printWeeklyDistribution()
{
    unset previousFooter
    local status=99 footer footerCount=0
    while :
    do
	# Each section consists of 4 lines:
	# - legend for graph
	# - legend for footer
	# - footer
	# - comma-separated data
	local graphLegendFromData; IFS=$'\n' read -r graphLegendFromData || break
	local graphLegend="${graphLegendFromData:-$graphLegendText}"
	local footerLegendFromData; IFS=$'\n' read -r footerLegendFromData || break
	local footerLegend="${footerLegendFromData:-$footerLegendText}"
	IFS=$'\n' read -r footer || break
	local data; IFS=$'\n' read -r data || break

	local sparkEmptyOverride; [ -n "${SPARK_EMPTY+t}" ] || sparkEmptyOverride='SPARK_EMPTY="$DISTRIBUTIONOVERTHEYEAR_EMPTY_CELL"'
	local renderedDistribution; renderedDistribution="$(eval "$sparkEmptyOverride" 'spark --min 0 "${sparkArgs[@]}" "$data"')" && status=0 || exit $?

	local legendWidth=$DISTRIBUTIONOVERTHEYEAR_LEGEND_LENGTH

	local B="$DISTRIBUTIONOVERTHEYEAR_COLOR_BORDER" L="$DISTRIBUTIONOVERTHEYEAR_COLOR_LEGEND" F="$DISTRIBUTIONOVERTHEYEAR_COLOR_FOOTER" U="$DISTRIBUTIONOVERTHEYEAR_COLOR_UNITS" R="$DISTRIBUTIONOVERTHEYEAR_COLOR_RESET"
	if [ "$isFooter" ]; then
	    if [ -z "$legendWidth" ]; then
		legendWidth=$((${#graphLegend} > ${#footerLegend} ? ${#graphLegend} : ${#footerLegend}))
		[ -n "${borders[0]}" ] || let legendWidth+=1
	    fi

	    if [ "$isFooterOnlyOnChange" ]; then
		if [ -n "${previousFooter+t}" -a "$previousFooter" != "$footer" ]; then
		    printf %s "$finalFooter"
		    finalFooter=
		    footerCount=0
		fi
		previousFooter="$footer"
	    fi
	    if [ -n "$footerEvery" ] && [ $((footerCount % footerEvery)) -eq 0 ]; then
		printf %s "$finalFooter"
	    fi

	    printf "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$L" "$graphLegend" "$R" "${B}${borders[0]}${R}" "$renderedDistribution" "${B}${borders[1]}${R}"
	    printf "${footerCapture[@]}" \
		   "%s%-${legendWidth}.${legendWidth}s%s%s%s%s\\n" "$F" "$footerLegend" "$R" "${B}${borders[4]}${R}" "${U}${footer}${R}" "${B}${borders[5]}${R}"

	    let footerCount+=1
	else
	    local completeLegend="$graphLegend"; [ -n "$graphLegend" -a -n "$footerLegend" ] && completeLegend+=' '; completeLegend+="$footerLegend"
	    printf "%s%${legendWidth:+-}${legendWidth}${legendWidth:+.}${legendWidth}s%s%s\\n" "$L" "$completeLegend" "$R" "$renderedDistribution"
	fi
    done

    [ -z "$finalFooter" ] || printf %s "$finalFooter"
    return $status
}

tally | \
    if [ "$isWeekly" ]; then
	printWeeklyDistribution
    else
	printDailyDistribution
    fi
